product {
    1..4 Semester semester
    num totalECTS
}

structure Semester {
         Type type
    0..5 Module module
    num semesterECTS
    num previousECTS
}


enumeration Type {
    Summer
    Winter
}

enumeration Module {
    attribute num ects
    attribute str type
    attribute str group

    BM1     = ( 9, winter, b )
    BM2     = ( 9, summer, b )
    BM3     = ( 9, winter, b )
    AM1_1   = ( 6, each, a )
    AM1_2   = ( 6, each, a )
    AM2_1   = ( 6, each, a )
    AM2_2   = ( 6, each, a )
    AM3_1   = ( 6, each, a )
    AM3_2   = ( 6, each, a )
    PM1     = ( 12, each, p )
    PM2     = ( 12, each, p )
    PM3     = ( 12, each, p )
    IM      = ( 15, each, i )
    Thesis  = ( 30, each, t )
}

behavior {
    // require alldiff(semester.id)

    imply totalECTS = sum(s.semesterECTS for s in semester)

    // require semester[i].type != semester[i+1].type

    require semester[0].type != semester[1].type

    require semester[1].type != semester[2].type

    require semester[2].type != semester[3].type

    require semester[3].type != semester[4].type

    alldiff semester.module
}

behavior Semester {
    combinations ( type     module.type    )
    allow        ( Summer   (summer, each) )
    allow        ( Winter   (winter, each) )

    imply semesterECTS = sum(m.ects for m in module)

    imply previousECTS = sum(s.ects for s in root.semester if s.id < id)

    condition previousECTS < 90
    require module != Thesis
}

behavior {
    require 120 = totalECTS

    require 27 = sum(m.ects for m in semester.module if m.group == b)

    require 24 = sum(m.ects for m in semester.module if m.group == a)

    require 24 = sum(m.ects for m in semester.module if m.group == p)

    exists m in semester.module { m = IM}

    exists m in semester.module { m = Thesis }
}
