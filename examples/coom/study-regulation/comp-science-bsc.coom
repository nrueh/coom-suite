product {
    1..6 Semester semester
    1..2 Specialization specialization // should be 1 or 2 different specializations allowed, missing syntax for constraint
    num totalECTS
    // num totalECTS
    // Semester first
    // Semester second
    // Semester third
    // Semester fourth
}

structure Semester {
        ID id
        Type type
    0..5 Module module
    num semesterECTS
    num previousECTS
}

enumeration ID {
    attribute num id

    first = ( 1 )
    second = ( 2 )
    third = ( 3 )
    fourth = ( 4 )
    fifth = ( 5 )
    sixth = ( 6 )
}

enumeration Type {
    Summer
    Winter
}

enumeration Specialization {
    Bioinformatics
    Chemistry
    Geoscience
    CognitiveScience
    Physics
}

enumeration Module {
    attribute num ects
    attribute str type
    attribute str specialization_group
    attribute str group

    Biobm105 = ( 6, winter, b,  x )
    Biobm107 = ( 6, summer, ba, x )
    Biobm108 = ( 6, summer, ba, x )
    Bioam212 = ( 6, summer, ba, x )
    Bioam302 = ( 6, each,   ba, x )
    Bioam314 = ( 6, winter, ba, x )

    Matd230cs = ( 6, winter, none, v)

    // etc...
}

behavior {
    alldiff specialization

    imply totalECTS = sum(s.semesterECTS for s in semester)

    require semester[i].type != semester[i+1].type

    // You cannot take a module twice (correct behavior?)
    alldiff semester.module
}

behavior Semester {
    combinations ( type     module.type    )
    allow        ( Summer   (summer, each) )
    allow        ( Winter   (winter, each) )

    imply semesterECTS = sum(m.ects for m in module)

    imply previousECTS = sum(s.ects for s in root.semester if s.id < id)
}

behavior Semester {
    condition currentECTS < 126
    require module != Thesis
}

behavior {
    require 180 = totalECTS

    require 102 = sum(m.ects for m in semester.module if m.group = i)

    require 12 = sum(m.ects for m in semester.module if m.group = ii)

    require 30 = sum(m.ects for m in semester.module if m.group = x)

    require 6 = sum(m.ects for m in semester.module if m.group = v)

    require 18 = sum(m.ects for m in semester.module if m.group = vi)

    exists m in semester.module { m = Thesis }
}

behavior Module {
    condition specialization_group = b || specialization_group = ba
    exists Bioinformatics in root.specialization

    condition specialization_group = c || specialization_group = ca
    exists Chemistry in root.specialization

    // etc...
}
