product {
    1..8 Semester semester
    // num totalECTS
    // Semester first
    // Semester second
    // Semester third
    // Semester fourth
}

structure Semester {
        ID id
         Type type
    0..5 Module module
    num currentECTS
}

enumeration ID {
    attribute num id

    first = ( 1 )
    second = ( 2 )
    third = ( 3 )
    fourth = ( 4 )
}

enumeration Type {
    Summer 
    Winter
}

enumeration Module {
    attribute num ects
    attribute str type
    attribute str group

    BM1     = ( 9, winter, b )
    BM2     = ( 9, summer, b )
    BM3     = ( 9, winter, b )
    AM1_1   = ( 6, each, a )
    AM1_2   = ( 6, each, a )
    AM2_1   = ( 6, each, a )
    AM2_2   = ( 6, each, a )
    AM3_1   = ( 6, each, a )
    AM3_2   = ( 6, each, a )
    PM1     = ( 12, each, p )
    PM2     = ( 12, each, p )
    PM3     = ( 12, each, p )
    IM      = ( 15, each, i )
    Thesis  = ( 30, each, t )
}

behavior {
    require semester[i].type != semester[i+1].type
}

behavior Semester {
    combinations ( type     module.type    )
    allow        ( Summer   (summer, each) )
    allow        ( Winter   (winter, each) )

    imply currentECTS = sum(root.semester.module if root.semester.id < id)

    condition currentECTS < 90
    require module != Thesis
}

behavior {
    require 120 = sum(semester.module.ects)

    require 27 = sum(semester.module.ects if semester.module.group == b)

    require 24 = sum(semester.module.ects if semester.module.group == a)

    require 24 = sum(semester.module.ects if semester.module.group == p)

    // exists BM1 in semester.module
    // exists BM2 in semester.module
    // exists BM3 in semester.module

    exists IM in semester.module

    exists Thesis in semester.module

    // imply totalECTS = 

    // You cannot take a module twice
    require semester.module != semester.module
}


